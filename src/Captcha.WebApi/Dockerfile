# Using Windows Server Core, as it supports GDIP, which is required for drawing images
FROM mcr.microsoft.com/dotnet/aspnet:9.0-windowsservercore-ltsc2025 AS base

# Install the Arial Unicode MS font to Windows Server Core
COPY font.ttf .
RUN powershell -NoProfile -Command "Move-Item font.ttf C:\Windows\Fonts; Set-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts' -Name 'Arial Unicode MS (TrueType)' -Value 'font.ttf' -Type STRING"

# The rest of the dockerfile has been generated by Visual Studio and left unchanged
#See https://aka.ms/customizecontainer to learn how to customize your debug container and how Visual Studio uses this Dockerfile to build your images for faster debugging.

#Depending on the operating system of the host machines(s) that will build or run the containers, the image specified in the FROM statement may need to be changed.
#For more information, please see https://aka.ms/containercompat
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

FROM mcr.microsoft.com/dotnet/sdk:9.0-windowsservercore-ltsc2025 AS build
ARG BUILD_CONFIGURATION=Release
WORKDIR /src
COPY ["src/Captcha.WebApi/CaptchaWebApi.csproj", "src/Captcha.WebApi/"]
COPY ["src/Captcha.Core/Captcha.Core.csproj", "src/Captcha.Core/"]
RUN dotnet restore "./src/Captcha.WebApi/./CaptchaWebApi.csproj"
COPY . .
WORKDIR "/src/src/Captcha.WebApi"
RUN dotnet build "./CaptchaWebApi.csproj" -c %BUILD_CONFIGURATION% -o /app/build

FROM build AS publish
ARG BUILD_CONFIGURATION=Release
RUN dotnet publish "./CaptchaWebApi.csproj" -c %BUILD_CONFIGURATION% -o /app/publish /p:UseAppHost=false

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "CaptchaWebApi.dll"]
